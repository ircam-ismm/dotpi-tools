#!/bin/bash

set +e

error_exit() {
  error_code="${1:-255}"
  error_context="${2:-dotpi_prepare_system}"
  exit_code="${3:-255}"
  exit_message="${4:-System is NOT READY. Please flash SD card again.}"

  dotpi echo_error "dotpi_prepare_system: ${error_context}: error ${error_code}"
  dotpi echo_error "${exit_message}"

  exit "$exit_code"
}

############### bootstrap
error_exit_code_init=1

# This script MUST be executed by `pi` user
FIRSTUSER="$(getent passwd 1000 | cut -d: -f1)"
if [[ $(whoami) != "${FIRSTUSER}" ]] ; then
   error_exit 255 "This script MUST be executed by pi user (or first user)" $error_exit_code_init
fi

DOTPI_ROOT="${DOTPI_ROOT:-/opt/dotpi}"
source "${DOTPI_ROOT}/share/dotpi_init.bash" || {
  error_exit $? "source dotpi_init.bash" $error_exit_code_init
}

# set wifi country code
#
# This is also done earlier by `dotpi_firstrun` but doing this
# only in one place fail for some unknown reason
dotpi echo_info "raspi-config nonint do_wifi_country ${dotpi_wifi_country_code}"
sudo raspi-config nonint do_wifi_country "${dotpi_wifi_country_code}" || {
  error_exit $? "set wifi country code" $error_exit_code_init
}

# unblock wifi in any case
sudo nmcli radio wifi on
sudo rfkill unblock wifi

############### system packages via apt
error_exit_code_package=2

# in case dpkg was interrupted
sudo dpkg --configure -a || {
  error_exit $? dpkg $error_exit_code_package
}

dotpi echo_info "Uninstall apt packages:" "${dotpi_apt_uninstall_default[@]}" "${dotpi_apt_uninstall[@]}"
sudo dotpi apt_get purge "${dotpi_apt_uninstall_default[@]}" "${dotpi_apt_uninstall[@]}" || {
  error_exit $? 'apt_get purge' $error_exit_code_package
}

sudo dotpi apt_get clean  || {
  error_exit $? 'apt_get clean' $error_exit_code_package
}
sudo dotpi apt_get autoremove -y || {
  error_exit $? 'apt_get autoremove' $error_exit_code_package
}

dotpi echo_info "Update and dist-upgrade"
sudo dotpi apt_get update || {
  error_exit $? 'apt_get update' $error_exit_code_package
}
sudo dotpi apt_get dist-upgrade || {
  error_exit $? 'apt_get dist-upgrade' $error_exit_code_package
}

dotpi echo_info "Install apt packages: ${dotpi_apt_install_default[@]} ${dotpi_apt_install[@]}"
sudo dotpi apt_get install "${dotpi_apt_install_default[@]}" "${dotpi_apt_install[@]}" || {
  error_exit $? 'apt_get install' $error_exit_code_package
}


############### node.js
error_exit_code_node=3

dotpi echo_info "Install Node.js"

word_size="$(dotpi file_word_size "$(which file)" )"
if [[ $word_size == "32" ]] ; then
   node_arch=armv7l
else
   node_arch=arm64
fi

# install n for sudo usage
N_PREFIX="${DOTPI_ROOT}/share/n"
sudo rm -rf -- "$N_PREFIX" || {
  error_exit $? "rm ${N_PREFIX}" $error_exit_code_node
}


sudo mkdir -p -- "$N_PREFIX" || {
  error_exit $? "mkdir ${N_PREFIX}" $error_exit_code_node
}

while ! curl -L https://bit.ly/n-install -o /tmp/n-install ; do
  dotpi echo_warning "Error while retrieving n-install"
  sleep 1
  echo "trying again"
done

while ! sudo N_PREFIX="${DOTPI_ROOT}/share/n" bash /tmp/n-install -y -a "$node_arch" "$dotpi_node_version" ; do
  dotpi echo_warning "Error with n-install"
  sleep 1
  echo "trying again"
  sudo rm -rf -- "$N_PREFIX"
  sudo mkdir -p -- "$N_PREFIX"
done

rm /tmp/n-install
sudo bash -c "cat >> '/root/.bashrc' << EOF

# dotpi: force the usage of -a for correct architecture
# (n relies on uname, which tells about the kernel, not the executables)

alias n='n -a ${node_arch}'

EOF
" || {
  error_exit $? "n alias in /root/.bashrc" $error_exit_code_node
}

source="${N_PREFIX}/bin"
destination="/usr/bin"
executables=(
   corepack
   n
   node
   npm
   npx
)
for executable in "${executables[@]}" ; do
    sudo ln -s -f "${source}/${executable}" "${destination}/${executable}" || {
      error_exit $? "symlink to ${destination}/${executable}" $error_exit_code_node
    }
done

############## services and modules
error_exit_code_services=4

dotpi echo_info "Enable linger to run user services without login"

sudo loginctl enable-linger "$FIRSTUSER" || {
  error_exit $? "loginctl enable-linger" $error_exit_code_services
}

############# dotpi module manager

# bootstrap-install
module_name="@dotpi/module"
source_path="${DOTPI_ROOT}/dist/${module_name}"
destination_prefix="${DOTPI_ROOT}/lib"
destination_path="${destination_prefix}/node_modules/${module_name}"
{
  dotpi echo_info "Install dotpi module tool"
  # no dependencies, yet
  sudo npm install --no-fund \
    --prefix "$destination_prefix" \
    --install-strategy nested \
    --omit dev \
    --save \
    --ignore-scripts \
    -- \
    "$source_path" || {
    error_exit $? "dotpi_module: error when installing '${module_name}'" $error_exit_code_services
  }

  (
    echo "# Installing '${module_name}' dependencies"
    # install dependencies, and run postinstall
    sudo npm install --no-fund \
    --prefix "$destination_path" \
    --omit dev || {
      error_exit $? "dotpi_module: error when installing '${module_name}' dependencies'" $error_exit_code_services
    }
  )
} || {
  error_exit $? "${module_name}" $error_exit_code_services
}

############## audio
error_exit_code_audio=6

dotpi echo_info "Configure audio"

# set alsa default output volume and unmute
sudo dotpi audio_device_init || {
    dotpi echo_warning "Error while setting default output volume and unmute for ${dotpi_audio_device} device" \
    $error_exit_code_audio
  }

# over-ride calls to jack, to use pipewire instead
# copy with prefix 000- to ensure it is loaded before default aarch64-linux-gnu.conf
for f in /usr/share/doc/pipewire/examples/ld.so.conf.d/pipewire-jack-*.conf ; do
  source_basename="$(basename "$f")"
  destination_basename="000-${source_basename}"
  sudo cp "$f" "/etc/ld.so.conf.d/${destination_basename}" || {
    error_exit $? "install ${f}" $error_exit_code_audio
  }
done
sudo ldconfig || {
  error_exit $? "ldconfig" $error_exit_code_audio
}

# settings over-rides
source_path="${DOTPI_ROOT}/share/wireplumber"
destination_path='/usr/share/wireplumber'
if [ -r "$source_path" ] ; then
   sudo mkdir -p "$destination_path"
   tar c -C "$source_path" '.' | sudo tar x -C "$destination_path"
   exit_code=$?
   pipe_status="${PIPESTATUS[0]}"
   if (( exit_code || pipe_status )) ; then
      if (( exit_code )) ; then
         dotpi echo_error "Error code: $exit_code"
      fi

      if (( pipe_status )) ; then
         dotpi echo_error "Pipe status: $pipe_status"
      fi

      error_exit "$((exit_code ? exit_code : pipe_status))"  "Error while copying ${source_path} to ${destination_path}" $error_exit_code_audio
   fi
fi

systemctl --user enable --now wireplumber.service || {
  dotpi echo_warning "error while enabling wireplumber.service now: ${?}"
  dotpi echo_warning "wireplumber.service will be available after a reboot"
  # do not exit
}

"${DOTPI_ROOT}/share/dotpi_pipewire/dotpi_install" || {
  dotpi echo_error "error while installing dotpi_pipewire: ${?}"
  # do not exit
}

############## dotpi-manager
error_exit_code_dotpi_manager=7

if [[ "$dotpi_manager_install" == "yes" ]]; then (
  dotpi echo_info "Install dotpi-manager"

  destination="${DOTPI_ROOT}/share/dotpi-manager"
  sudo mkdir -p -- "$destination" || {
    error_exit $? "dotpi-manager: mkdir ${destination}" $error_exit_code_dotpi_manager
  }
  cd -- "$destination" || {
    error_exit $? "dotpi-manager: cd ${destination}" $error_exit_code_dotpi_manager
  }

  destination_runtime="${destination}/runtime"
  sudo rm -rf -- "$destination_runtime" || {
    error_exit $? "dotpi-manager: rm ${destination_runtime}" $error_exit_code_dotpi_manager
  }
  sudo git clone --depth=1 https://github.com/ircam-ismm/dotpi-manager.git "$destination_runtime" || {
    error_exit $? "dotpi-manager: git clone" $error_exit_code_dotpi_manager
  }
  # bootstrap-install
  sudo bash -c "\
    source '${DOTPI_ROOT}/share/dotpi_init.bash' && \
    source runtime/dotpi/dotpi-manager.bash && \
    dotpi_manager_update \
  " || {
    error_exit $? "dotpi_manager_update" $error_exit_code_dotpi_manager
  }
) fi

############## dotpi-led
error_exit_code_dotpi_led=8

if [[ "$dotpi_led_install" == "yes" ]]; then (
  dotpi echo_info "Install dotpi-led"

  destination="${DOTPI_ROOT}/share/dotpi-led"
  sudo mkdir -p -- "$destination" || {
    error_exit $? "dotpi-led: mkdir ${destination}" $error_exit_code_dotpi_led
  }
  cd -- "$destination" || {
    error_exit $? "dotpi-led: cd ${destination}" $error_exit_code_dotpi_led
  }

  destination_runtime="${destination}/runtime"
  sudo rm -rf -- "$destination_runtime" || {
    error_exit $? "dotpi-led: rm ${destination_runtime}" $error_exit_code_dotpi_led
  }
  sudo git clone --depth=1 https://github.com/ircam-ismm/dotpi-led.git "$destination_runtime" || {
    error_exit $? "dotpi-led: git clone" $error_exit_code_dotpi_led
  }
  # bootstrap-install
  sudo bash -c "\
    source '${DOTPI_ROOT}/share/dotpi_init.bash' && \
    source runtime/dotpi/dotpi-led.bash && \
    dotpi_led_update \
  " || {
    error_exit $? "dotpi-led: dotpi_led_update" $error_exit_code_dotpi_led
  }
) fi

############## dotpi modules
error_exit_code_dotpi_modules=10

dotpi echo_info "Uninstall dotpi modules packages:" "${dotpi_module_uninstall_default[@]}" "${dotpi_module_uninstall[@]}"
sudo dotpi module uninstall "${dotpi_module_uninstall_default[@]}" "${dotpi_module_uninstall[@]}"

dotpi echo_info "Uninstall dotpi modules packages:" "${dotpi_module_install_default[@]}" "${dotpi_module_install[@]}"
sudo dotpi module install "${dotpi_module_install_default[@]}" "${dotpi_module_install[@]}"

############## finalisation

dotpi echo_info "System prepared."
dotpi echo_info "Rebooting..."

sudo reboot

