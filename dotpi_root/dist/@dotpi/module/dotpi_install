#!/usr/bin/env node

import path from 'node:path';
import fs from 'node:fs/promises';
import { fileURLToPath } from 'node:url';

import { symlink } from '@dotpi/javascript/filesystem.js';
import * as echo from '@dotpi/javascript/echo.js';
import {
  dotpiRootGet,
  isRaspberryPi,
} from '@dotpi/javascript/system.js';

if (! await isRaspberryPi() ) {
  echo.info('System is not a Raspberry Pi with dotpi: no installation');
  // no error
  process.exit(0);
}

if (process.getuid() !== 0) {
  echo.error('This script must be run as root');
  process.exit(1);
}

// __filename and __dirname are undefined in module type
const localFileName = fileURLToPath(import.meta.url);
const localPath = path.dirname(localFileName);

let dotpiRoot;
try {
  dotpiRoot = await dotpiRootGet();
  const destinationPath = path.resolve(dotpiRoot, 'bin');
  const sourcePath = path.resolve(localPath, 'bin');
  const sourceBaseNames = await fs.readdir(sourcePath);

  // forEach does not wait: parallel execution
  sourceBaseNames.forEach(async (sourceBaseName) => {
    const sourceFile = path.resolve(sourcePath, sourceBaseName);
    const destinationFile = path.resolve(destinationPath, sourceBaseName);

    echo.info(`Install ${destinationFile} -> ${sourceFile}`);
    await symlink(sourceFile, destinationFile);
  });

} catch (error) {
  echo.error(`Error with '${localFileName}'`, error.message);
  let exitCode = 1;
  if (error && error.cause) {
    exitCode = error.cause.code;
  }
  process.exit(exitCode);
}
